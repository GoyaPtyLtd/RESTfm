#!/bin/bash

# First start - only run once on the first start of container (unless forced
#               to run via FIRST_START_FORCE=true environment variable).
#
# Performs the following once-off actions:
#   - Install SSL/TLS Certificate into FileMaker Server.
#   - Enable 
#
# Note: It is not possible to install a certificate during docker image build
#       as the encryption key that FMS uses (presumably a hash of something
#       like hostname) is not repeatable when running the container later.
#       We install the certificate at container runtime to resolve this issue.
#
# @copyright
#  Copyright (c) 2023 Goya Pty Ltd.
#
# @license
#  Licensed under The MIT License. For full copyright and license information,
#  please see the LICENSE file distributed with this package.
#  Redistributions of files must retain the above copyright notice.
#
# @author
#  Gavin Stewart <gavin@goya.com.au>


# This file we be created once we have been run successfully
READY_FILE='/opt/FileMaker/FileMaker Server/NginxServer/htdocs/httpsRoot/ready.txt'

# Log output to this file as well
LOG_FILE='/first-start.log'

# Don't allow unset variables
set -u

# Don't run again if we have already run
if [[ -e "${READY_FILE}" ]]; then
    if [[ -v FIRST_START_FORCE && "${FIRST_START_FORCE}" == "true" ]]; then
        :   # Forced to run again, do nothing here
    else
        log "already run."
        exit 0
    fi
fi

# Fetch the FMS Admin Console user and password from Assisted Install.txt
#
# Globals:
#   FMS_AC_USER
#   FMS_AC_PASS
fetch_credentials() {
    log "Fetch credentials from Assisted Install.txt"
    FMS_AC_USER="$(grep "Admin Console User=" "/fms/Assisted Install.txt")"
    FMS_AC_USER="${FMS_AC_USER#*=}"
    FMS_AC_PASS="$(grep "Admin Console Password=" "/fms/Assisted Install.txt")"
    FMS_AC_PASS="${FMS_AC_PASS#*=}"

}

# Install SSL/TLS certificate via fmsadmin
# Globals:
#   FMS_AC_USER
#   FMS_AC_PASS
install_certificate() {
    log "Installing SSL/TLS certificate ..."
    local fmsadmin_output
    local fmsadmin_code=-999
    local attempt_count=1
    while [[ $fmsadmin_code -ne 0 && $attempt_count -le 10 ]]; do

        fmsadmin_output=$(fmsadmin certificate import -y -u "${FMS_AC_USER}" -p "${FMS_AC_PASS}" \
            /certs/certificate.pem \
            --keyfile /certs/certificate.key  \
            --keyfilepass "$(cat /certs/certificate.pass)" 2>&1)
        fmsadmin_code=$?

        if [[ $fmsadmin_code -ne 0 ]]; then
            log "  ++ fmsadmin certificate import failed attempt: ${attempt_count}"

            if [[ "$fmsadmin_output" =~ .*"Error: 9"|"10502".* ]]; then
                # Error: 9 (Access denied)
                # Error: 10502 (Host unreachable)
                #
                # These are common errors on slower systems while fmshelper
                # starts up, so we ignore and try again. Don't show the error.
                :
            else
                # Output this fmsadmin error message though, and try again.
                log "  !! Unexpected error: $fmsadmin_code: $fmsadmin_output"
            fi

            ((attempt_count+=1))
            sleep 2
        else
            # Success!
            log "${fmsadmin_output}"
            break
        fi

    done

    if [[ $fmsadmin_code -ne 0 ]]; then
        log "ERROR: Failed to install SSL/TLS certificate, last fmsadmin error was:"
        log "$fmsadmin_output"
        exit 1
    fi

    log "... done"

    log "Restarting fmshelper"
    systemctl restart fmshelper
}

# Set up to log file descriptor 5 to file and stdout
setup_log() {
    exec 5> >(tee -ia "${LOG_FILE}")
}

# Log provided message(s) in parameters to file descriptor 5
log() {
    echo "${I_AM}[$BASHPID]" "$@" >&5
}

# This comment intentionally blank
main() {
    setup_log

    I_AM=$(basename "$0")

    fetch_credentials

    install_certificate

    # Save knowledge that we have run
    log "Ready"
    { echo "READY"; date; } > "${READY_FILE}"

    exit 0
}

main "$@"
